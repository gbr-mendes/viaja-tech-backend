{
    "openapi": "3.0.3",
    "info": {
        "title": "Viaja-Tech Back-end",
        "description": "This documentation refers to the back-end of the <a href='https://viaja-tech.netlify.app/' target='_blank'>Viaja-Tech</a> project, that was built during the Tera's FullStack bootcamp.It contains many features, such as an authentication system with permissions based on rules and various CRUD's. Learn more <a href='https://github.com/gbr-mendes/viaja-tech-backend'>here</a>.",
        "version": "1.0.0",
        "license": {
            "name": "MIT License",
            "url": "https://github.com/git/git-scm.com/blob/main/MIT-LICENSE.txt"
        }
    },
    "servers": [
        {
            "url": "/"
        }
    ],
    "tags": [
        {
            "name": "Authentication",
            "description": "Routes to create/validate token and register new simple users"
        },
        {
            "name": "Users",
            "description": "Routes to deal with functions relative to the authenticated user"
        },
        {
            "name": "Leads",
            "description": "Routes to retrive leads information"
        }
    ],
    "components": {
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        },
        "schemas": {
            "Authentication": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "default": "gabrielx165@gmail.com"
                    },
                    "password": {
                        "type": "string",
                        "default": "password"
                    }
                }
            },
            "Register": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "default": "type the name of the user"
                    },
                    "email": {
                        "type": "string",
                        "default": "type a valid email"
                    },
                    "phone": {
                        "type": "string",
                        "default": "Type the phone number"
                    },
                    "cpf": {
                        "type": "string",
                        "default": "type a valid CPF"
                    },
                    "password": {
                        "type": "string",
                        "default": "password"
                    },
                    "confirmPassword": {
                        "type": "string",
                        "default": "password"
                    }
                }
            },
            "UserUpdate": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "default": "type the name of the user"
                    },
                    "email": {
                        "type": "string",
                        "default": "type a valid email"
                    },
                    "phone": {
                        "type": "string",
                        "default": "Type the phone number"
                    }
                }
            }
        }
    },
    "paths": {
        "/api/v1/users/register": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "description": "Register a simple user on the system. By default, the role of the user is <b>LEAD</b> and can not be changed.",
                "requestBody": {
                    "required": "true",
                    "description": "Payload to create a simple user (Lead).",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#components/schemas/Register"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success on user creation"
                    },
                    "400": {
                        "description": "Invalid Payload"
                    },
                    "409": {
                        "description": "Credentials already registered"
                    },
                    "500": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/api/v1/users/login": {
            "post": {
                "description": "Get a JWT Token for a user",
                "tags": [
                    "Authentication"
                ],
                "requestBody": {
                    "required": "true",
                    "description": "Json with email and passowrd to get a token for a valid user",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#components/schemas/Authentication"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Login Success"
                    },
                    "400": {
                        "description": "Invalid Payload"
                    },
                    "401": {
                        "description": "Invalid credentials"
                    },
                    "500": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/api/v1/users/verify-token": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "description": "Verify if a token is valid",
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token is valid"
                    },
                    "401": {
                        "description": "Invalid token or token not provided"
                    },
                    "500": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/api/v1/users/me": {
            "get": {
                "tags": [
                    "Users"
                ],
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get the authenticated user information, based on it's role",
                "responses": {
                    "200": {
                        "description": "User info retrived successfuly"
                    },
                    "401": {
                        "description": "Invalid token or token not provided"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/api/v1/users/update": {
            "patch": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Users"
                ],
                "description": "Update the authenticated user information. All the fields are option. Just remove the unnecessary from the payload",
                "requestBody": {
                    "required": "true",
                    "description": "Payload to update the user. Just the listed fields are allowed",
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#components/schemas/UserUpdate"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User updated successfuly"
                    },
                    "400": {
                        "description": "Invalid payload"
                    },
                    "401": {
                        "description": "Unauthenticated user"
                    },
                    "409": {
                        "description": "Email already registered"
                    },
                    "500": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/api/v1/users/avatar": {
            "put": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "tags": [
                    "Users"
                ],
                "description": "Route to update the user avatar",
                "requestBody": {
                    "required": "true",
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "image": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Avatar updated successfuly"
                    },
                    "400": {
                        "description": "Image not sent"
                    },
                    "401": {
                        "description": "Unauthenticated user"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "500": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/api/v1/leads": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get the registered leads. Allowed just to the classes <b>Admin</b> and <b>Sales Manager</b>",
                "tags": [
                    "Leads"
                ],
                "parameters": [
                    {
                        "name": "limit",
                        "type": "number",
                        "in": "query",
                        "description": "Number of elements for each query"
                    },
                    {
                        "name": "page",
                        "type": "number",
                        "in": "query",
                        "description": "Page to query the elements"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success getting the leads"
                    },
                    "401": {
                        "description": "Unauthenticated user"
                    },
                    "403": {
                        "description": "User not allowed to perform this action"
                    },
                    "500": {
                        "description": "Unexpected error"
                    }
                }
            }
        },
        "/api/v1/leads/{leadId}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Get the registered leads. Allowed just to the classes <b>Admin</b> and <b>Sales Manager</b>",
                "tags": [
                    "Leads"
                ],
                "parameters": [
                    {
                        "name": "leadId",
                        "type": "string",
                        "in": "path",
                        "description": "ObjectId to get an especific lead",
                        "required": "true"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success getting the lead"
                    },
                    "401": {
                        "description": "Unauthenticated user"
                    },
                    "403": {
                        "description": "User not allowed to perform this action"
                    },
                    "404": {
                        "description": "Lead not found"
                    },
                    "500": {
                        "description": "Unexpected error"
                    }
                }
            }
        }
    }
}